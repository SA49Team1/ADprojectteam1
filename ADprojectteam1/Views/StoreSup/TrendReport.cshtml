@using ADprojectteam1.Models;


@{
    ViewBag.Title = "TrendReport";
    string[] months= ViewBag.months;
    int[] cons = ViewBag.cons;
    Item item = ViewBag.item;
    int[] sbalance = ViewBag.sbalance;
}

<div class="row" style="padding-top:0px;">
    <div class="col-sm-3 col-xs-3 col-lg-3 col-md-3">
        @{
            Html.RenderPartial("_Layout_StoreSup_LeftBar");
        }
    </div>

    <div class="w3-main" style="margin-left:250px">
        <h4>Item Info</h4>

        <table class="w3-table w3-striped">
            <tr><th>Category</th><th>Item Code</th><th>Item Decription</th><th>Item UOM</th><th>ReOrder Level</th><th>ReOrder Quant</th></tr>
            <tr><td>@item.Category</td><td>@item.ItemCode</td><td>@item.Description</td><td>@item.UnitofMeasure</td><td><input type="text" size="6" id="reorderlevelBox" value="@item.ReorderLevel"><input type="button" value="Update ReorderLevel" onclick="UpdateReorderLevel(@item.Id);" /></td><td><input type="text" size="6" id="reorderquantBox" value="@item.ReorderQty"><input type="button" value="Update Reorder Quant" onclick="UpdateReorderQuant(@item.Id);" /></td></tr>
            <tr><th></th><th></th><th></th><th></th><th>Average Monthly Consumption</th><th>Average Stock Balance</th>

            <tr><td></td><td></td><td></td><td></td><td>@String.Format("{0:0.##}", cons.Average())</td><td>@String.Format("{0:0.##}", sbalance.Average())</td></tr>

        </table>

        <h4>Consuming TrendReport</h4>
        <table class="w3-table w3-striped">
            <tr><td>Month</td>
                @{ for (int i = 0; i < months.Length; i++)
                    {
                        <td><span id="months @i">@months[i]</span></td>
}
            }
        </tr>
        <tr><td>Comsumed Quant</td>
            @{ for (int i = 0; i < cons.Length; i++)
                {
                    <td><span id="cons @i">@cons[i]</span></td>
                }
            }
        </tr>
            <tr><td>Stock Balance</td>
            @{ for (int i = 0; i < sbalance.Length; i++)
                {
                    <td><span id="sbalance @i">@sbalance[i]</span></td>
                }
            }
        </tr>
    </table>


    

    <br>
    <br>

    <!-- Styles -->
    <style>
        #chartdiv {
            width: 100%;
            height: 500px;
        }
    </style>

    <!-- Resources -->
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

    <!-- Chart code -->
    <script>
        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create chart instance
            var chart = am4core.create("chartdiv", am4charts.XYChart);
            chart.scrollbarX = new am4core.Scrollbar();

            // Add data
           for (x = 0; x < 12; x++) {

                var m = document.getElementById("months " + x).innerHTML

                var c = parseInt(document.getElementById("cons " + x).innerHTML)

                var s = parseInt(document.getElementById("sbalance " + x).innerHTML)
                var obj = { "date": m, "cons": c, "stockbalance":s };
               chart.data.push(obj);
               

            }

            

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "date";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 60;
            categoryAxis.tooltip.disabled = true;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.minWidth = 50;
            valueAxis.min = 0;
            valueAxis.cursorTooltipEnabled = false;

            // Create series
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.sequencedInterpolation = true;
            series.dataFields.valueY = "cons";
            series.dataFields.categoryX = "date";
            series.tooltipText = "[{categoryX}: bold]{valueY}[/]";
            series.columns.template.strokeWidth = 0;

            series.tooltip.pointerOrientation = "vertical";

            series.columns.template.column.cornerRadiusTopLeft = 10;
            series.columns.template.column.cornerRadiusTopRight = 10;
            series.columns.template.column.fillOpacity = 0.8;

            // on hover, make corner radiuses bigger
            var hoverState = series.columns.template.column.states.create("hover");
            hoverState.properties.cornerRadiusTopLeft = 0;
            hoverState.properties.cornerRadiusTopRight = 0;
            hoverState.properties.fillOpacity = 1;

            series.columns.template.adapter.add("fill", function (fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            })

            
            var paretoValueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            paretoValueAxis.renderer.opposite = true;
            paretoValueAxis.min = 0;
            
            paretoValueAxis.strictMinMax = true;
            paretoValueAxis.renderer.grid.template.disabled = true;
            paretoValueAxis.numberFormatter = new am4core.NumberFormatter();
            paretoValueAxis.numberFormatter.numberFormat = "#"
            paretoValueAxis.cursorTooltipEnabled = false;

            var paretoSeries = chart.series.push(new am4charts.LineSeries())
            paretoSeries.dataFields.valueY = "stockbalance";
            paretoSeries.dataFields.categoryX = "date";
            paretoSeries.yAxis = paretoValueAxis;
            paretoSeries.tooltipText = "stockbalance: {valueY.formatNumber('#')}[/]";
            paretoSeries.bullets.push(new am4charts.CircleBullet());
            paretoSeries.strokeWidth = 2;
            paretoSeries.stroke = new am4core.InterfaceColorSet().getFor("alternativeBackground");
            paretoSeries.strokeOpacity = 0.5;

            // Cursor
            chart.cursor = new am4charts.XYCursor();
            chart.cursor.behavior = "panX";

        }); // end am4core.ready()



         function UpdateReorderLevel(item_id) {




                var q = document.getElementById("reorderlevelBox").value

                var pdata = { itemId: item_id, newreorderlevel: q };

                $.ajax({
                    type: "POST",
                    url: "/StoreSup/UpdateReOrderLevel",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(pdata),
                    dataType: "json",

                    // Response Success
                    success: function (response) {

                        alert("Updated Item ReOrder Level successfully");
                        document.getElementById("reorderlevelBox").innerHTML = response.newlevel;

                    },

                    // Response Fail
                    failure: function (response) {
                        alert("Fail Case");
                    },

                    // Response Error
                    error: function (response) {
                        alert("ERROR case");
                    }


                });
        }


        function UpdateReorderQuant(item_id) {




                var q = document.getElementById("reorderquantBox").value

                var pdata = { itemId: item_id, newreorderquant: q };

                $.ajax({
                    type: "POST",
                    url: "/StoreSup/UpdateReOrderQuant",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(pdata),
                    dataType: "json",

                    // Response Success
                    success: function (response) {

                        alert("Updated Item ReOrder Quant successfully");
                        document.getElementById("reorderquantBox").innerHTML = response.newquant;

                    },

                    // Response Fail
                    failure: function (response) {
                        alert("Fail Case");
                    },

                    // Response Error
                    error: function (response) {
                        alert("ERROR case");
                    }


                });
            }
    </script>

    <!-- HTML -->
    <div id="chartdiv"></div>
    </div>
</div>








